#!/usr/bin/env sh
# Go Version Manager

_cmd=$1
_args="ARGS ..."

print_usage() {
    echo "Usage: $(basename "$0") $_cmd $_args"
    case ${_cmd} in
        install|switch|compile)
            ;;
        *)
            echo ""
            echo "Commands:"
            echo ""
            echo "  install   Install a go version"
            echo "  switch    Switch to a go version"
            echo "  compile   Compile using the given go version"
            echo "  test      Run go test using the given version"
            echo ""
            ;;
    esac
}

_check_arg() {
    [ -z "${1}" ] && {
        echo "Missing ${2}" 1>&2
        print_usage 1>&2
        exit 1
    }
    echo "${1}"
}

_switch_to_version() {
    rm -f "$GOROOT"
    ln -s "$HOME/sdk/go${1}" "$GOROOT" 1>/dev/null
}

_install_version() {
    go get "golang.org/dl/go${1}"
    "go${1}" download
}

install_cmd() {
    version=$(_check_arg "$1" "version")
    if ! command -v "go${version}" 2>/dev/null; then
        _install_version "${version}"
        print "Switch to go ${version}? (y/N)"
        read -r yn
        [ "$yn" = "y" ] && _switch_to_version "${version}"
    fi
}

switch_cmd() {
    version=$(_check_arg "$1" "version")
    if ! command -v "go${version}" 2>/dev/null; then
        printf "Go %s is not installed. Install now? (y/N) " "${version}"
        read -r yn
        [ "$yn" = "y" ] && _install_version "${version}"
    fi
    _switch_to_version "${version}"
    go version
}

compile_cmd() {
    version=$(_check_arg "$1" "version")
    shift
    [ $# -lt 1 ] && { print_usage 1>&2; exit 1; }
    "go${version}" build "$@"
}

test_cmd() {
    version=$(_check_arg "$1" "version")
    shift
    [ $# -lt 1 ] && { print_usage 1>&2; exit 1; }
    "go${version}" test "$@"
}

set -e

case $1 in
    install|i)
        _args="VERSION"
        install_cmd "$2"
        ;;
    switch|s)
        _args="VERSION"
        switch_cmd "$2"
        ;;
    compile|c)
        _args="VERSION GOBUILDARGS ..."
        v=$2
        shift
        shift
        compile_cmd "$v" "$@"
        ;;
    test)
        _args="VERSION GOTESTARGS ..."
        v=$2
        shift
        shift
        test_cmd "$v" "$@"
        ;;
    *)
        _cmd=COMMAND
        print_usage
        exit 1
        ;;
esac
